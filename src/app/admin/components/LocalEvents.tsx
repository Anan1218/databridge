"use client";

import { useState, useEffect } from 'react';
import { collection, query, orderBy, limit, getDocs } from 'firebase/firestore';
import { db } from '@/utils/firebase';
import { useAuthContext } from '@/contexts/AuthContext';

interface NewsItem {
  id: string;
  content: string;
  email: string;
  status: string;
  timestamp: Date;
  userId: string;
  type: string;
}

export default function LocalEvents() {
  const [news, setNews] = useState<NewsItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());
  const { user } = useAuthContext();
  
  useEffect(() => {
    async function fetchNews() {
      if (!user?.uid) return;
      
      try {
        // Fetch reports
        const eventsRef = collection(db, 'users', user.uid, 'reports');
        const reportsQuery = query(
          eventsRef,
          orderBy('timestamp', 'desc'),
          limit(10)
        );
        
        const reportsSnapshot = await getDocs(reportsQuery);
        const reportItems = reportsSnapshot.docs.map(doc => ({
          id: doc.id,
          content: doc.data().content || '',
          email: doc.data().email || '',
          status: doc.data().status || 'unknown',
          timestamp: doc.data().timestamp?.toDate() || new Date(),
          userId: doc.data().userId || '',
          type: 'report'
        }));

        // Fetch events from the events subcollection of each report
        const allEvents = [];
        for (const report of reportItems) {
          const eventsRef = collection(db, 'users', user.uid, 'reports', report.id, 'events');
          const eventsSnapshot = await getDocs(eventsRef);
          const events = eventsSnapshot.docs.map(doc => ({
            id: doc.id,
            name: doc.data().name || '',
            description: doc.data().description || '',
            date: doc.data().date || '',
            location: doc.data().location || '',
            url: doc.data().url || '',
            timestamp: doc.data().timestamp?.toDate() || new Date(),
            type: 'event'
          }));
          allEvents.push(...events);
        }

        // Combine and sort all items by timestamp
        const allItems = [...reportItems, ...allEvents].sort((a, b) => 
          b.timestamp.getTime() - a.timestamp.getTime()
        );
        
        setNews(allItems);
      } catch (error) {
        console.error('Error fetching news and events:', error);
      } finally {
        setIsLoading(false);
      }
    }

    fetchNews();
  }, [user]);

  if (isLoading) {
    return <div className="p-6">Loading...</div>;
  }

  if (news.length === 0) {
    return (
      <div className="p-6 text-center">
        <p className="text-gray-600 mb-4">No Reports Available</p>
        <p className="text-gray-500 mb-4">You haven't generated any reports yet. Click above to generate your first report.</p>
      </div>
    );
  }

  const formatDate = (date: Date): string => {
    return new Intl.DateTimeFormat('en-US', {
      dateStyle: 'medium',
      timeStyle: 'short'
    }).format(date);
  };

  const toggleExpand = (id: string) => {
    setExpandedItems(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const getContentPreview = (content: string) => {
    const words = content.split(' ');
    return words.length > 30 ? words.slice(0, 30).join(' ') + '...' : content;
  };

  return (
    <div className="space-y-4 p-6">
      {news.map((item) => (
        <div
          key={item.id}
          className="bg-white rounded-lg shadow p-4"
        >
          <div className="flex justify-between items-start mb-2">
            <div>
              {item.type === 'event' ? (
                <>
                  <h3 className="font-semibold text-lg">{(item as any).name}</h3>
                  <p className="text-gray-600">{(item as any).location}</p>
                  <p className="text-gray-500">{(item as any).date}</p>
                </>
              ) : (
                <p className="text-gray-600">Report generated by {item.email}</p>
              )}
              <p className="text-sm text-gray-400">{formatDate(item.timestamp)}</p>
            </div>
            {item.type === 'event' && (
              <a
                href={(item as any).url}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:text-blue-800"
              >
                View Event â†’
              </a>
            )}
          </div>
          
          <div className="mt-2">
            {item.type === 'event' ? (
              <p className="text-gray-700">{(item as any).description}</p>
            ) : (
              <p className="text-gray-700">{item.content}</p>
            )}
          </div>
        </div>
      ))}
    </div>
  );
}